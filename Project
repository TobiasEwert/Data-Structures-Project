#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <map>
#include <climits>
#include <algorithm>
using namespace std;

struct Edge {
  Edge(int origin = 0, int dest = 0, int dist = 0, int cost = 0) : 
        origin(origin), dest(dest), dist(dist), cost(cost) {}

  int origin, dest, dist, cost;
  vector<Edge> get_edge();
};

struct Vertex {
  Vertex(std::string airport = "", std::string state = "", bool
        visited = false) : 
        airport(airport), state(state), visited(visited) {}
  
  std::string airport;
  std::string state;
  bool visited;
  bool getVisited() const {return visited; }
  void setVisited(bool v) { visited = v; }
  const std::string getAirport() const {return airport; }
  const std::string getState() const {return state; }
  const vector<Vertex> get_vertices();
};

struct DSU {
    vector<int> parent, rank;
    
    DSU(int n) {
        parent.resize(n);
        rank.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int i){
        return (parent[i] == i) ? i : (parent[i] = find(parent[i]));
    }
    
    bool unite(int x, int y) {
        int s1 = find(x), s2 = find(y);
        if(s1 == s2) return false;
        if (s1 != s2) {
            if (rank[s1] < rank[s2]) parent[s1] = s2;
            else if (rank[s1] > rank[s2]) parent[s2] = s1;
            else parent[s2] = s1, rank[s1]++;
        }
        return true;
    }
};

bool comparator(const Edge& a,const Edge& b){
    if(a.cost < b.cost)return true;
    return false;
  } 

class Graph {
private:
  std::vector<Vertex> vertices;
  std::vector<std::vector<Edge>> edges;

public:
  Graph() {}
  

  void insert_vertex(const Vertex& ver) {
    if (get_vertex_index(ver) == -1) {
        vertices.push_back(ver); //insert the vertex to the array of vertices
        std::vector<Edge> tmp;
        edges.push_back(tmp); //insert empty vector to the edges
    }
  }


  int get_vertex_index(const Vertex& ver) {
      for(int i = 0; i < vertices.size(); i++) {
          if (vertices[i].getAirport() == ver.getAirport()) {
              return i;
          }
      }
  
      return -1;
  }

  void add_edge(const Vertex& origin, const Vertex& dest, int d, int c) {
    int i1 = get_vertex_index(origin);
    int i2 = get_vertex_index(dest);
    if (i1 == -1 || i2 == -1) {
        throw std::string("Add_edge: incorrect vertices");
    }
    Edge v{i1, i2, d, c};
  
    edges[i1].push_back(v);
  }

  void clean_visited() {
      for(Vertex& v : vertices) {
          v.setVisited(false);
      }
  }
  
  void print_vertices() {
      for(int i = 0; i < vertices.size(); i++) {
          cout << vertices[i].airport << "  " << vertices[i].state << endl;
      }
  }

  void print_adj_list() {
    for(int i = 0; i < edges.size(); i++) {
      for(int j = 0; j < edges[i].size(); j++) {
        cout << "Origin Index: " << edges[i][j].origin << " Dest Index: " << edges[i][j].dest << " Distance: " << edges[i][j].dist << " Cost: " << edges[i][j].cost << endl;
      }
    }
  }
  
  vector<Vertex> get_vertices() const {
      return vertices;
  }
  
  vector<Edge> get_edge(int index) const {
      if(index >= 0 && index <= edges.size()){
        return edges[index];
      }
      return {};
  }
  
  void Prims(){
    vector<Vertex> vert = get_vertices();
    int n = vert.size();
    
    vector<bool> visited(n, false);
    vector<int> min_cost(n, INT_MAX);
    vector<int> parent(n, -1);
    
    int total = 0;
    for(int m = 0; m < n;m++){
        if(visited[m]) continue;
        min_cost[m] = 0;
        for(int i = 0; i < n;i++){
            int u = -1;
            for(int j = 0; j < n;j++){
                if(!visited[j] && (u == -1 || min_cost[j] < min_cost[u])) {
                    u = j;
                }
            }
            
            if (u == -1) break;
            
            visited[u] = true;
            if (min_cost[u] == INT_MAX) {
                break; // Disconnected component
            }
            total += min_cost[u];
            
            for(const Edge& e: edges[u]){
              int v = e.dest;
              if(!visited[v] && e.cost < min_cost[v]) {
                  min_cost[v] = e.cost;
                  parent[v] = u;
              }
            }
        }
    }
    
    cout << "Minimal Spanning Tree:" << endl;
    cout << "Edge\t\tWeight" << endl;
    for(int k = 1;k < n;k++){
        if(parent[k] != -1 && visited[k]){
            cout << vert[parent[k]].airport << " - " << vert[k].airport 
            << "\t\t" << min_cost[k] << endl;
        }
    }
    cout << "Total cost of MST: " << total << endl;
  }
  
  void Kruskals(){
    vector<Edge> all_edges;
    vector<Vertex> vert = get_vertices();
    int n = vert.size();
    
    for(int i = 0;i < n;i++){
        for(const Edge& e : edges[i]){
            all_edges.push_back(e);
        }
    }
    
    sort(all_edges.begin(), all_edges.end(), comparator);
    
    DSU dsu(n);
    int total = 0;
    
    cout << "Minimal Spanning Tree:" << endl;
    cout << "Edge\t\tWeight" << endl;
    for(const Edge& e : all_edges){
        if(dsu.unite(e.origin, e.dest)){
            cout << vert[e.origin].airport << " - " << vert[e.dest].airport 
            << "\t\t" << e.cost << endl;
            total += e.cost;
        }
    }
    cout << "Total cost of MST: " << total << endl;
  }

};

Graph create_undirected_graph (const Graph& G){
    Graph G_u;
    vector<Vertex> vertices = G.get_vertices();
    map<pair<int,int>, int> costs;
    
    for(const Vertex& v: vertices)
      G_u.insert_vertex(v);
    
    for(int i = 0;i < vertices.size();i++){
      vector<Edge> edge_list = G.get_edge(i);
      for(const Edge& e: edge_list){
          int org = e.origin;
          int dest = e.dest;
          int cost = e.cost;
          
          pair <int,int> p = (org < dest) ? make_pair(org, dest) : make_pair(dest, org);
          
          if (costs.find(p) == costs.end()) {
            costs[p] = cost;
          } else {
            // If reverse edge already exists, store min cost
            costs[p] = min(costs[p], cost);
        }
      }
    }
    
    for(auto& pair : costs){
      int org = pair.first.first;
      int dest = pair.first.second;
      int cost = pair.second;
      
      Vertex dest_org = vertices[org];
      Vertex org_dest = vertices[dest];
      
      G_u.add_edge(dest_org, org_dest, 0, cost);
      G_u.add_edge(org_dest, dest_org, 0, cost);
    }
    return G_u;
  }

int main() {
  std::ifstream infile("airports.txt");
  std::string origin, dest, originState, destState;
  std::string line;
  int comma_index = 0;
  int dist, cost;
  int d, c;

  Graph G;
  
  getline(infile, line); // Read and skip first line
  
  while(getline(infile, line)) { // Read the rest of the lines one by one
    comma_index = line.find(',');
    origin = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << origin << "   ";
    
    comma_index = line.find(',');
    dest = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << dest << "   ";
    //cout << dest << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find('"');
    originState = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << originState << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find('"');
    destState = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << destState << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find(',');
    dist = stoi(line.substr(0, comma_index));
    line = line.substr(comma_index + 1, line.length());
    //cout << dist << "   ";
    
    comma_index = line.find(',');
    cost = stoi(line.substr(0, comma_index));
    line = line.substr(comma_index + 1, line.length());
    //cout << cost << endl;

    Vertex v1(origin, originState, false);
    Vertex v2(dest, destState, false);

    G.insert_vertex(v1);
    G.insert_vertex(v2);
    
    G.add_edge(v1, v2, dist, cost);
  }
  Graph G_u = create_undirected_graph(G);
  //G_u.Prims();
  //G_u.Kruskals();

  //G.print_vertices();
  //G.print_adj_list();
  
}
