#include <iostream>
#include <string>
#include <vector>
#include <fstream>
using namespace std;

struct Edge {
  Edge(int origin = 0, int dest = 0, int dist = 0, int cost = 0) : 
        origin(origin), dest(dest), dist(dist), cost(cost) {}

  int origin, dest, dist, cost;
};

struct Vertex {
  Vertex(std::string airport = "", std::string state = "", bool
        visited = false) : 
        airport(airport), state(state), visited(visited) {}
  
  std::string airport;
  std::string state;
  bool visited;
  bool getVisited() const {return visited; }
  void setVisited(bool v) { visited = v; }
  const std::string getAirport() const {return airport; }
  const std::string getState() const {return state; }
};

class Graph {
private:
  std::vector<Vertex> vertices;
  std::vector<std::vector<Edge>> edges;

public:
  Graph() {}

  void insert_vertex(const Vertex& ver) {
    if (get_vertex_index(ver) == -1) {
        vertices.push_back(ver); //insert the vertex to the array of vertices
        std::vector<Edge> tmp;
        edges.push_back(tmp); //insert empty vector to the edges
    }
  }


  int get_vertex_index(const Vertex& ver) {
      for(int i = 0; i < vertices.size(); i++) {
          if (vertices[i].getAirport() == ver.getAirport()) {
              return i;
          }
      }
  
      return -1;
  }

  void add_edge(const Vertex& origin, const Vertex& dest, int d, int c) {
    int i1 = get_vertex_index(origin);
    int i2 = get_vertex_index(dest);
    if (i1 == -1 || i2 == -1) {
        throw std::string("Add_edge: incorrect vertices");
    }
    Edge v{i1, i2, d, c};
  
    edges[i1].push_back(v);
  }

  void clean_visited() {
      for(Vertex& v : vertices) {
          v.setVisited(false);
      }
  }
  
  void print_vertices() {
      for(int i = 0; i < vertices.size(); i++) {
          cout << vertices[i].airport << "  " << vertices[i].state << endl;
      }
  }
};

int main() {
  std::ifstream infile("airports.txt");
  std::string origin, dest, originState, destState;
  std::string line;
  int comma_index = 0;
  int dist, cost;
  std::string d, c;

  Graph G;
  
  getline(infile, line); // Read and skip first line
  
  while(getline(infile, line)) { // Read the rest of the lines one by one
    comma_index = line.find(',');
    origin = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << origin << "   ";
    
    comma_index = line.find(',');
    dest = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << dest << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find('"');
    originState = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << originState << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find('"');
    destState = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << destState << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find(',');
    dist = stoi(line.substr(0, comma_index));
    line = line.substr(comma_index + 1, line.length());
    //cout << dist << "   ";
    
    comma_index = line.find(',');
    cost = stoi(line.substr(0, comma_index));
    line = line.substr(comma_index + 1, line.length());
    //cout << cost << endl;

    Vertex v1(origin, originState, false);
    Vertex v2(dest, destState, false);

    G.insert_vertex(v1);
    G.insert_vertex(v2);
    
    G.add_edge(v1, v2, d, c);
  }
  
  G.print_vertices();
  
}
