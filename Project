#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <climits>
using namespace std;

struct Edge {
  Edge(int origin = 0, int dest = 0, int dist = 0, int cost = 0) : 
        origin(origin), dest(dest), dist(dist), cost(cost) {}

  int origin, dest, dist, cost;
  
  bool operator>(const Edge& a) {
    return cost < a.cost;
  }
  
  void bubbleSort(vector<Edge> &v);
};

struct Vertex {
  Vertex(std::string airport = "", std::string state = "", bool
        visited = false) : 
        airport(airport), state(state), visited(visited) {}
  
  std::string airport;
  std::string state;
  bool visited;
  bool getVisited() const {return visited; }
  void setVisited(bool v) { visited = v; }
  const std::string getAirport() const {return airport; }
  const std::string getState() const {return state; }
};

struct DSU {
    vector<int> parent, rank;
    
    DSU(int n) {
        parent.resize(n);
        rank.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int i){
        return (parent[i] == i) ? i : (parent[i] = find(parent[i]));
    }
    
    bool unite(int x, int y) {
        int s1 = find(x), s2 = find(y);
        if(s1 == s2) return false;
        if (s1 != s2) {
            if (rank[s1] < rank[s2]) parent[s1] = s2;
            else if (rank[s1] > rank[s2]) parent[s2] = s1;
            else parent[s2] = s1, rank[s1]++;
        }
        return true;
    }
};

void bubbleSort(vector<Edge> &v){
    int n = v.size();
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (v[j] > v[j + 1])
                swap(v[j], v[j + 1]);
        }
    }
}

class Graph {
private:
  std::vector<Vertex> vertices;
  std::vector<std::vector<Edge>> edges;

public:
  Graph() {}

  void insert_vertex(const Vertex& ver) {
    if (get_vertex_index(ver) == -1) {
        vertices.push_back(ver); //insert the vertex to the array of vertices
        std::vector<Edge> tmp;
        edges.push_back(tmp); //insert empty vector to the edges
    }
  }


  int get_vertex_index(const Vertex& ver) {
      for(int i = 0; i < vertices.size(); i++) {
          if (vertices[i].getAirport() == ver.getAirport()) {
              return i;
          }
      }
  
      return -1;
  }

  void add_edge(const Vertex& origin, const Vertex& dest, int d, int c) {
    int i1 = get_vertex_index(origin);
    int i2 = get_vertex_index(dest);
    if (i1 == -1 || i2 == -1) {
        throw std::string("Add_edge: incorrect vertices");
    }
    Edge v{i1, i2, d, c};
  
    edges[i1].push_back(v);
  }
  
    vector<Vertex> get_vertices() const {
      return vertices;
    }
    
    vector<Edge> get_edge(int index) const {
      if(index >= 0 && index <= edges.size()){
        return edges[index];
      }
      return {};
    }
  
    void print_vertices() {
      for(int i = 0; i < vertices.size(); i++) {
          cout << vertices[i].airport << "  " << vertices[i].state << endl;
      }
    }
  
    void print_adj_list() {
    for(int i = 0; i < edges.size(); i++) {
      for(int j = 0; j < edges[i].size(); j++) {
        cout << "Origin Index: " << edges[i][j].origin << " Dest Index: " << edges[i][j].dest << " Distance: " << edges[i][j].dist << " Cost: " << edges[i][j].cost << endl;
      }
    }
  }
  
  /*void shortest_path(const Vertex& o, const Vertex& d, int stops) {
    int io = G.get_vertex_index(o);
    int id = G.get_vertex_index(d);
    
    for(int i = 0; i < stops; i++) {
        for(int j = io; j != io; j++) {
            for(int k )
        }
    
    }
  }*/
  
  // Function 2
  void shortest_path(const std::string& start_airport, const std::string& end_airport) {
    int n = vertices.size();
    std::vector<int> dist(n, INT_MAX);
    std::vector<int> cost(n, INT_MAX);
    std::vector<int> prev(n, -1);
    std::vector<bool> visited(n, false);

    int start_index = -1, end_index = -1;
    for (int i = 0; i < n; ++i) {
        if (vertices[i].getAirport() == start_airport) start_index = i;
        if (vertices[i].getAirport() == end_airport) end_index = i;
    }

    if (start_index == -1 || end_index == -1) {
        std::cout << "Shortest route from " << start_airport << " to " << end_airport << ": None" << std::endl;
        return;
    }

    dist[start_index] = 0;
    cost[start_index] = 0;

    for (int i = 0; i < n; ++i) {
        int u = -1;
        for (int j = 0; j < n; ++j) {
            if (!visited[j] && (u == -1 || dist[j] < dist[u])) {
                u = j;
            }
        }

        if (dist[u] == INT_MAX) break;
        visited[u] = true;

        for (const Edge& e : edges[u]) {
            if (dist[u] + e.dist < dist[e.dest]) {
                dist[e.dest] = dist[u] + e.dist;
                cost[e.dest] = cost[u] + e.cost;
                prev[e.dest] = u;
            }
        }
    }

    if (dist[end_index] == INT_MAX) {
        std::cout << "Shortest route from " << start_airport << " to " << end_airport << ": None" << std::endl;
        return;
    }

    std::vector<std::string> path;
    for (int at = end_index; at != -1; at = prev[at]) {
        path.push_back(vertices[at].getAirport());
    }

    std::vector<std::string> path_reversed;
    for (int i = path.size() - 1; i >= 0; --i) {
        path_reversed.push_back(path[i]);
    }


    std::cout << "Shortest route from " << start_airport << " to " << end_airport << ": ";
    for (int i = 0; i < path_reversed.size(); ++i) {
        std::cout << path_reversed[i];
        if (i != path_reversed.size() - 1) std::cout << " -> ";
    }
    std::cout << ". The length is " << dist[end_index] << ". The cost is " << cost[end_index] << "." << std::endl;

    }
    
    // Function 3
    void shortest_paths_to_state(const std::string& start_airport, const std::string& dest_state) {
        int n = vertices.size();
        std::vector<int> dist(n, INT_MAX);
        std::vector<int> cost(n, INT_MAX);
        std::vector<int> prev(n, -1);
        std::vector<bool> visited(n, false);
    
        int start_index = -1;
        for (int i = 0; i < n; ++i) {
            if (vertices[i].getAirport() == start_airport) {
                start_index = i;
                break;
            }
        }
    
        if (start_index == -1) {
            std::cout << "Start airport " << start_airport << " not found.\n";
            return;
        }
    
        dist[start_index] = 0;
        cost[start_index] = 0;
    
        for (int i = 0; i < n; ++i) {
            int u = -1;
            for (int j = 0; j < n; ++j) {
                if (!visited[j] && (u == -1 || dist[j] < dist[u])) {
                    u = j;
                }
            }
    
            if (dist[u] == INT_MAX) break;
            visited[u] = true;
    
            for (int k = 0; k < edges[u].size(); ++k) {
                int v = edges[u][k].dest;
                int d = edges[u][k].dist;
                int c = edges[u][k].cost;
    
                if (dist[u] + d < dist[v]) {
                    dist[v] = dist[u] + d;
                    cost[v] = cost[u] + c;
                    prev[v] = u;
                }
            }
        }
    
        bool found = false;
        std::cout << "Shortest paths from " << start_airport << " to " << dest_state << " state airports are:\n";
        std::cout << "Path                               Length         Cost\n";
    
        for (int i = 0; i < n; ++i) {
            //std::cout << "Vertex " << i << ": " << vertices[i].getAirport() << ", State: " << vertices[i].getState() << "\n";

            if (vertices[i].getState() == dest_state && dist[i] != INT_MAX) {
                std::vector<std::string> path;
                for (int at = i; at != -1; at = prev[at]) {
                    path.push_back(vertices[at].getAirport());
                }
    
                std::vector<std::string> path_reversed;
                for (int j = path.size() - 1; j >= 0; --j) {
                    path_reversed.push_back(path[j]);
                }
    
                std::string path_str = "";
                for (int j = 0; j < path_reversed.size(); ++j) {
                    path_str += path_reversed[j];
                    if (j != path_reversed.size() - 1) path_str += "->";
                }
    
                while (path_str.length() < 35) path_str += " ";
    
                std::cout << path_str << dist[i] << "              " << cost[i] << std::endl;
                found = true;
            }
        }
    
        if (!found) {
            std::cout << "No reachable airports found in state " << dest_state << ".\n";
        }
    }
    
    // Function 4
    void shortest_path_with_stops(const std::string& start_airport, const std::string& end_airport, int stops) {
        int n = vertices.size();
        int start_index = -1, end_index = -1;
    
        for (int i = 0; i < n; ++i) {
            if (vertices[i].getAirport() == start_airport) start_index = i;
            if (vertices[i].getAirport() == end_airport) end_index = i;
        }
    
        if (start_index == -1 || end_index == -1) {
            std::cout << "Shortest route from " << start_airport << " to " << end_airport << " with " << stops << " stops: None" << std::endl;
            return;
        }
    
        struct PathInfo {
            int current, dist, cost, remaining_stops;
            std::vector<int> path;
        };
    
        std::vector<PathInfo> queue;
        queue.push_back({start_index, 0, 0, stops + 1, {start_index}});
    
        int min_dist = INT_MAX;
        int min_cost = INT_MAX;
        std::vector<int> best_path;
    
        while (!queue.empty()) {
            PathInfo p = queue.back();
            queue.pop_back();
    
            if (p.current == end_index && p.remaining_stops == 0) {
                if (p.dist < min_dist || (p.dist == min_dist && p.cost < min_cost)) {
                    min_dist = p.dist;
                    min_cost = p.cost;
                    best_path = p.path;
                }
                continue;
            }
    
            if (p.remaining_stops == 0) continue;
    
            for (const Edge& e : edges[p.current]) {
                std::vector<int> new_path = p.path;
                new_path.push_back(e.dest);
                queue.push_back({e.dest, p.dist + e.dist, p.cost + e.cost, p.remaining_stops - 1, new_path});
            }
        }
    
        std::cout << "Shortest route from " << start_airport << " to " << end_airport << " with " << stops << " stops: ";
        if (best_path.empty()) {
            std::cout << "None" << std::endl;
            return;
        }
    
        for (int i = 0; i < best_path.size(); ++i) {
            std::cout << vertices[best_path[i]].getAirport();
            if (i != best_path.size() - 1) std::cout << " -> ";
        }
    
        std::cout << ". The length is " << min_dist << ". The cost is " << min_cost << "." << std::endl;
    }


  // Function 5
  void print_direct_flights() {
    vector<int> inbound(vertices.size(), 0);
    vector<int> outbound(vertices.size(), 0);
    int cur, to;
    cout << "Airport        Connections" << endl;
    for(int i = 0; i < vertices.size(); i++) {
        cur = get_vertex_index(vertices[i]);
        
        for (int j = 0; j < edges[i].size(); j++) {
        if (edges[i][j].origin == cur) {
            outbound[i]++;
        }
    }

        for (int k = 0; k < edges.size(); k++) {
            for (int j = 0; j < edges[k].size(); j++) {
                if (edges[k][j].dest == cur) {
                    inbound[i]++;
                }
            }
        }
    }
    
    for(int i = 0; i < vertices.size(); i++) {
        cout << vertices[i].airport << "            " << inbound[i] + outbound[i] << endl;
    }
  }
  
  // Function 6
  Graph create_undirected_graph (const Graph& G){
     Graph G_u;
     vector<Vertex> vertices = G.get_vertices();
 
     for(const Vertex& v: vertices)
       G_u.insert_vertex(v);
 
    vector<vector<int>> edge;
    
     for(int i = 0;i < vertices.size();i++){
       vector<Edge> edge_list = G.get_edge(i);
       for(const Edge& e: edge_list){
           int org = e.origin;
           int dest = e.dest;
           int cost = e.cost;
 
           int x = (org < dest) ? org : dest;
           int y = (org < dest) ? dest : org;
 
           bool exist = false;
           for(int j = 0; j < edge.size(); j++){
               if(edge[j][0] == x && edge[j][1] == y){
                   if(edge[j][2] > cost){
                       edge[j][2] = cost;
                   }
                   exist = true;
                   break;
               }
           }
           
           if(!exist){
               vector<int> temp_edge = {x, y, cost};
               edge.push_back(temp_edge);
           }
       }
     }
 
     for(int i = 0;  i < edge.size(); i++){
       int org = edge[i][0];
       int dest = edge[i][1];
       int cost = edge[i][2];
       
       G_u.add_edge(vertices[org], vertices[dest], 0, cost);
       G_u.add_edge(vertices[dest], vertices[org], 0, cost);
     }
     return G_u;
   }
  
  // Function 7
  void Prims(){
    vector<Vertex> vert = get_vertices();
    int n = vert.size();
    
    vector<bool> visited(n, false);
    vector<int> min_cost(n, INT_MAX);
    vector<int> parent(n, -1);
    
    int total = 0;
    for(int m = 0; m < n;m++){
        if(visited[m]) continue;
        min_cost[m] = 0;
        for(int i = 0; i < n;i++){
            int u = -1;
            for(int j = 0; j < n;j++){
                if(!visited[j] && (u == -1 || min_cost[j] < min_cost[u])) {
                    u = j;
                }
            }
            
            if (u == -1) break;
            
            visited[u] = true;
            if (min_cost[u] == INT_MAX) {
                break; // Disconnected component
            }
            total += min_cost[u];
            
            for(const Edge& e: edges[u]){
              int v = e.dest;
              if(!visited[v] && e.cost < min_cost[v]) {
                  min_cost[v] = e.cost;
                  parent[v] = u;
              }
            }
        }
    }
    
    cout << "Minimal Spanning Tree:" << endl;
    cout << "Edge\t\tWeight" << endl;
    for(int k = 1;k < n;k++){
        if(parent[k] != -1 && visited[k]){
            cout << vert[parent[k]].airport << " - " << vert[k].airport 
            << "\t\t" << min_cost[k] << endl;
        }
    }
    cout << "Total cost of MST: " << total << endl;
  }
  
  // Function 8
  void Kruskals() {
    vector<Edge> edge;
    vector<Vertex> vert = get_vertices();
    int n = vert.size();
    
    for(int i = 0;i < n;i++){
        for(const Edge& e : edges[i]){
            edge.push_back(e);    
        }
    }
    
    
    bubbleSort(edge);
    
    //sort(edge.begin(), edge.end(), comparator);
    
    DSU dsu(n);
    int total = 0;
    
    cout << "Minimal Spanning Tree:" << endl;
    cout << "Edge\t\tWeight" << endl;
    for(const Edge& e : edge){
        if(dsu.unite(e.origin, e.dest)){
            cout << vert[e.origin].airport << " - " << vert[e.dest].airport 
            << "\t\t" << e.cost << endl;
            total += e.cost;
        }
    }
    cout << "Total cost of MST: " << total << endl;
  }


  void clean_visited() {
      for(Vertex& v : vertices) {
          v.setVisited(false);
      }
  }
};

int main() {
  std::ifstream infile("airports.txt");
  std::string origin, dest, originState, destState;
  std::string line;
  int comma_index = 0;
  int dist, cost;
  int d, c;

  Graph G;
  
  getline(infile, line); // Read and skip first line
  
  while(getline(infile, line)) { // Read the rest of the lines one by one
    comma_index = line.find(',');
    origin = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << origin << "   ";
    
    comma_index = line.find(',');
    dest = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << dest << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 2, line.length());
    
    comma_index = line.find('"');
    originState = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << originState << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 2, line.length());
    
    comma_index = line.find('"');
    destState = line.substr(0, comma_index);
    line = line.substr(comma_index + 1, line.length());
    //cout << destState << "   ";
    
    comma_index = line.find(',');
    line = line.substr(comma_index + 1, line.length());
    
    comma_index = line.find(',');
    dist = stoi(line.substr(0, comma_index));
    line = line.substr(comma_index + 1, line.length());
    //cout << dist << "   ";
    
    comma_index = line.find(',');
    cost = stoi(line.substr(0, comma_index));
    line = line.substr(comma_index + 1, line.length());
    //cout << cost << endl;

    Vertex v1(origin, originState, false);
    Vertex v2(dest, destState, false);

    G.insert_vertex(v1);
    G.insert_vertex(v2);
    
    G.add_edge(v1, v2, dist, cost);
  }
  
  //G.print_vertices();
  //G.print_adj_list();
  
 
  
    cout << "Task #2 Outputs: " << endl;
    G.shortest_path("IAD", "MIA");
    cout << endl;
    G.shortest_path("PIT", "ACT");
    cout << endl;
    
    cout << "Task #3 Outputs: " << endl;
    G.shortest_paths_to_state("ATL", "FL");
    cout << endl;
    G.shortest_paths_to_state("PIT", "TX");
    cout << endl;
    
    cout << "Task #4 Outputs: " << endl;
    G.shortest_path_with_stops("IAD", "MIA", 3);
    cout << endl;
    G.shortest_path_with_stops("PIT", "ACT", 2);
    cout << endl;
    
    cout << "Task #5 Outputs: " << endl;
    G.print_direct_flights();
    
    Graph G_u = G.create_undirected_graph(G);
    cout << "Task #7 Outputs: " << endl;
    G_u.Prims();
    
    cout << "Task #8 Outputs: " << endl;
    G_u.Kruskals(); 
}
